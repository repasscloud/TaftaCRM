@page "/register"

@using TaftaCRM.Models.ViewModels
@using TaftaCRM.Data
@inject TaftaDbContext _taftaDbContext
@inject NavigationManager _navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="RegisterUser" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>REGISTER</h3>
            </div>

            <div class="mb-3">
                <label>Email Address</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="firstname.lastname@email.com" />
                <ValidationMessage For="() => Model.UserName" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="abcd1234" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>

            <div class="mb-3">
                <label>Confirm Password</label>
                <InputText @bind-Value="Model.PasswordConfirm" class="form-control" placeholder="abcd1234" type="password" />
                <ValidationMessage For="() => Model.PasswordConfirm" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task RegisterUser()
    {
        // check if there any users in the DB first
        if (!_taftaDbContext.UsersAccounts.Any())
        {
            // hash the password
            var hashedPassword = Helpers.PasswordHasher.HashPassword(Model.Password!);

            // create a new user account (as admin)
            var newUserAccount = new TaftaCRM.Models.Internal.System.UserAccount
            {
                Id = 0,
                EmailAddress = Model.UserName!,
                Password = hashedPassword,
                userAccountRole = Models.Internal.System.Static.UserAccountRole.Administrator,
                userAccountStatus = Models.Internal.System.Static.UserAccountStatus.Enabled,
            };

            // add the new user to the DbContext
            await _taftaDbContext.UsersAccounts.AddAsync(newUserAccount);

            // save changes to the db
            await _taftaDbContext.SaveChangesAsync();

            _navigationManager.NavigateTo("user-created/admin");
        }

        // try to find user, else register
        var existingUser = _taftaDbContext.UsersAccounts
            .FirstOrDefault(x => x.EmailAddress == Model.UserName!.ToLowerInvariant());

        if (existingUser == null)
        {
            // user does not exist, safe to proceed with creation

            // hash the password
            var hashedPassword = Helpers.PasswordHasher.HashPassword(Model.Password!);

            // create a new user account (as admin)
            var newUserAccount = new TaftaCRM.Models.Internal.System.UserAccount
            {
                Id = 0,
                EmailAddress = Model.UserName!,
                Password = hashedPassword,
                userAccountRole = Models.Internal.System.Static.UserAccountRole.Pleb,
                userAccountStatus = Models.Internal.System.Static.UserAccountStatus.Enabled,
            };

            // add the new user to the DbContext
            await _taftaDbContext.UsersAccounts.AddAsync(newUserAccount);

            // save changes to the db
            await _taftaDbContext.SaveChangesAsync();

            _navigationManager.NavigateTo("user-created/pleb");
        }
        else
        {
            // User exists, handle accordingly
            errorMessage = "User account already exists. Contact Administrator to reset password.";
            await Task.Delay(5000);
            _navigationManager.NavigateTo("/");
        }
    }
}

